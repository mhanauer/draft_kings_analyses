{
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "%load_ext lab_black"
      ],
      "outputs": [],
      "execution_count": 1,
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "Step: Load data"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import os\n",
        "from pyprojroot import here\n",
        "import numpy as np\n",
        "from skimpy import clean_columns\n",
        "from data_cleaning.fun_hot_encode_limit import fun_hot_encode_limit\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import gower\n",
        "from sklearn.cluster import AgglomerativeClustering\n",
        "from scipy.cluster.hierarchy import dendrogram\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.metrics import (\n",
        "    silhouette_score,\n",
        "    calinski_harabasz_score,\n",
        "    davies_bouldin_score,\n",
        ")\n",
        "\n",
        "\n",
        "path_data = here(\"./data\")\n",
        "os.chdir(path_data)\n",
        "\n",
        "\n",
        "data_draft_kings = pd.read_csv(\"draft_kings_2021_2022.csv\")"
      ],
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1683228133495
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data_draft_kings"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 2,
          "data": {
            "text/plain": "    Position               Name  Points  Salary  Reduction  Value Ownership %  \\\n0         QB    Patrick Mahomes   36.28    8100        8.1   4.48       8.20%   \n1         RB      Melvin Gordon   23.80    5300        5.3   4.49       2.00%   \n2         RB          Joe Mixon   28.00    6200        6.2   4.52      16.00%   \n3         WR        Tyreke Hill   40.10    8200        8.2   4.89      10.80%   \n4         WR        Corey Davis   26.70    4900        4.9   5.45      12.20%   \n..       ...                ...     ...     ...        ...    ...         ...   \n562       WR         Mike Evans   29.70    7000        7.0   4.24       32.5%   \n563       WR        Tyreke Hill   16.70    7300        7.3   2.29       33.3%   \n564       TE       Travis Kelce   28.88    6700        6.7   4.31       29.1%   \n565     FLEX  Demarcus Robinson   11.60    3300        3.3   3.52        1.2%   \n566      DEF           Steelers    9.00    2400        2.4   3.75        7.8%   \n\n     Place  week  \n0        1     1  \n1        1     1  \n2        1     1  \n3        1     1  \n4        1     1  \n..     ...   ...  \n562      3    20  \n563      3    20  \n564      3    20  \n565      3    20  \n566      3    20  \n\n[567 rows x 9 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Position</th>\n      <th>Name</th>\n      <th>Points</th>\n      <th>Salary</th>\n      <th>Reduction</th>\n      <th>Value</th>\n      <th>Ownership %</th>\n      <th>Place</th>\n      <th>week</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>QB</td>\n      <td>Patrick Mahomes</td>\n      <td>36.28</td>\n      <td>8100</td>\n      <td>8.1</td>\n      <td>4.48</td>\n      <td>8.20%</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>RB</td>\n      <td>Melvin Gordon</td>\n      <td>23.80</td>\n      <td>5300</td>\n      <td>5.3</td>\n      <td>4.49</td>\n      <td>2.00%</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>RB</td>\n      <td>Joe Mixon</td>\n      <td>28.00</td>\n      <td>6200</td>\n      <td>6.2</td>\n      <td>4.52</td>\n      <td>16.00%</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>WR</td>\n      <td>Tyreke Hill</td>\n      <td>40.10</td>\n      <td>8200</td>\n      <td>8.2</td>\n      <td>4.89</td>\n      <td>10.80%</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>WR</td>\n      <td>Corey Davis</td>\n      <td>26.70</td>\n      <td>4900</td>\n      <td>4.9</td>\n      <td>5.45</td>\n      <td>12.20%</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>562</th>\n      <td>WR</td>\n      <td>Mike Evans</td>\n      <td>29.70</td>\n      <td>7000</td>\n      <td>7.0</td>\n      <td>4.24</td>\n      <td>32.5%</td>\n      <td>3</td>\n      <td>20</td>\n    </tr>\n    <tr>\n      <th>563</th>\n      <td>WR</td>\n      <td>Tyreke Hill</td>\n      <td>16.70</td>\n      <td>7300</td>\n      <td>7.3</td>\n      <td>2.29</td>\n      <td>33.3%</td>\n      <td>3</td>\n      <td>20</td>\n    </tr>\n    <tr>\n      <th>564</th>\n      <td>TE</td>\n      <td>Travis Kelce</td>\n      <td>28.88</td>\n      <td>6700</td>\n      <td>6.7</td>\n      <td>4.31</td>\n      <td>29.1%</td>\n      <td>3</td>\n      <td>20</td>\n    </tr>\n    <tr>\n      <th>565</th>\n      <td>FLEX</td>\n      <td>Demarcus Robinson</td>\n      <td>11.60</td>\n      <td>3300</td>\n      <td>3.3</td>\n      <td>3.52</td>\n      <td>1.2%</td>\n      <td>3</td>\n      <td>20</td>\n    </tr>\n    <tr>\n      <th>566</th>\n      <td>DEF</td>\n      <td>Steelers</td>\n      <td>9.00</td>\n      <td>2400</td>\n      <td>2.4</td>\n      <td>3.75</td>\n      <td>7.8%</td>\n      <td>3</td>\n      <td>20</td>\n    </tr>\n  </tbody>\n</table>\n<p>567 rows Ã— 9 columns</p>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 2,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1683228193485
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pulp\n",
        "import pandas as pd\n",
        "\n",
        "def optimize_draft_kings_lineup(df, num_players):\n",
        "    # Create the problem variable\n",
        "    prob = pulp.LpProblem(\"DraftKings_Milly_Makers\", pulp.LpMaximize)\n",
        "\n",
        "    # Create decision variables\n",
        "    player_vars = pulp.LpVariable.dicts(\"Player\", (player for player in df[\"name\"]), 0, 1, pulp.LpInteger)\n",
        "\n",
        "    # Objective function: maximize total value\n",
        "    prob += pulp.lpSum([df.loc[df[\"name\"] == player, \"value\"].values[0] * player_vars[player] for player in df[\"name\"]]), \"Total_Value\"\n",
        "\n",
        "    # Constraints\n",
        "    prob += pulp.lpSum([df.loc[df[\"name\"] == player, \"cost\"].values[0] * player_vars[player] for player in df[\"name\"]]) <= 50000, \"Total_Cost\"\n",
        "    \n",
        "    for position, count in num_players.items():\n",
        "        prob += pulp.lpSum([player_vars[player] for player in df[df[\"position\"] == position][\"name\"]]) == count, f\"{count}_{position}s\"\n",
        "\n",
        "    # Solve the problem\n",
        "    prob.solve()\n",
        "\n",
        "    # Store the results\n",
        "    optimal_lineup = [v.name.split(\"_\")[1] for v in prob.variables() if v.varValue > 0]\n",
        "\n",
        "    # Return the optimal lineup as a DataFrame\n",
        "    return df[df[\"name\"].isin(optimal_lineup)]\n",
        "\n",
        "# Sample data as a DataFrame\n",
        "data = {\n",
        "    \"name\": [\"Player1\", \"Player2\", \"Player3\", \"Player4\", \"Player5\", \"Player6\", \"Player7\", \"Player8\"],\n",
        "    \"position\": [\"QB\", \"QB\", \"RB\", \"RB\", \"WR\", \"WR\", \"TE\", \"TE\"],\n",
        "    \"cost\": [6000, 6100, 5000, 5200, 4500, 4800, 4300, 4600],\n",
        "    \"value\": [20, 22, 15, 18, 12, 14, 10, 13]\n",
        "}\n",
        "\n",
        "df = pd.DataFrame(data)\n",
        "\n",
        "# Set the number of players for each position\n",
        "num_players = {\"QB\": 1, \"RB\": 2, \"WR\": 3, \"TE\": 1}\n",
        "\n",
        "# Run the optimization and print results\n",
        "optimal_lineup_df = optimize_draft_kings_lineup(df, num_players)\n",
        "print(\"Optimal Lineup:\")\n",
        "print(optimal_lineup_df)\n"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Welcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /anaconda/envs/azureml_py38/lib/python3.8/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/5f8a0e3beade44b994cfca4310863bc8-pulp.mps max timeMode elapsed branch printingOptions all solution /tmp/5f8a0e3beade44b994cfca4310863bc8-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 10 COLUMNS\nAt line 51 RHS\nAt line 57 BOUNDS\nAt line 66 ENDATA\nProblem MODEL has 5 rows, 8 columns and 16 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nProblem is infeasible - 0.00 seconds\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nOptimal Lineup:\n      name position  cost  value\n1  Player2       QB  6100     22\n2  Player3       RB  5000     15\n3  Player4       RB  5200     18\n4  Player5       WR  4500     12\n5  Player6       WR  4800     14\n7  Player8       TE  4600     13\n"
        }
      ],
      "execution_count": 28,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1683232661999
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.to_csv(\"data_draft_kings_optimize_test.csv\")"
      ],
      "outputs": [],
      "execution_count": 29,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1683232694075
        }
      }
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python38-azureml",
      "language": "python",
      "display_name": "Python 3.8 - AzureML"
    },
    "language_info": {
      "name": "python",
      "version": "3.8.10",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "microsoft": {
      "ms_spell_check": {
        "ms_spell_check_language": "en"
      },
      "host": {
        "AzureML": {
          "notebookHasBeenCompleted": true
        }
      }
    },
    "kernel_info": {
      "name": "python38-azureml"
    },
    "nteract": {
      "version": "nteract-front-end@1.0.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}